
'use server';

/**
 * @fileOverview An AI agent that dresses a model with a single garment or a combination of garments.
 * It uses a pre-generated description of the garment(s) to enhance the prompt for OpenAI.
 *
 * - generateVirtualDressUp - A function that handles the virtual dress up process.
 * - GenerateVirtualDressUpInput - The input type for the generateVirtualDressUp function.
 * - GenerateVirtualDressUpOutput - The return type for the generateVirtualDressUp function.
 */

import { openai } from '@/ai/openai';
import { dataUriToBuffer, base64ToDataUri } from '@/ai/utils';
import { z } from 'zod';

const GenerateVirtualDressUpInputSchema = z.object({
  modelPhotoDataUri: z
    .string()
    .describe(
      "A photo of a model, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  garmentPhotoDataUri: z
    .string()
    .optional()
    .describe(
      "A photo of the garment, as a data URI. This is used for single-item variations."
    ),
  garmentDescription: z.string().describe("A textual description of the garment or a combination of garments, previously generated by another AI."),
  positivePrompt: z.string().describe('Positive prompts to refine the garment style and integration.'),
  negativePrompt: z.string().describe('Negative prompts to prevent undesirable characteristics.'),
  customStylePrompt: z.string().optional().describe('Custom user-defined prompts for additional styling, like hair, makeup, or background.'),
});
export type GenerateVirtualDressUpInput = z.infer<typeof GenerateVirtualDressUpInputSchema>;

const GenerateVirtualDressUpOutputSchema = z.object({
  dressedUpPhotoDataUri: z
    .string()
    .describe('The photo of the model dressed in the new garment, as a data URI.'),
});
export type GenerateVirtualDressUpOutput = z.infer<typeof GenerateVirtualDressUpOutputSchema>;

export async function generateVirtualDressUp(input: GenerateVirtualDressUpInput): Promise<GenerateVirtualDressUpOutput> {
  const {
    modelPhotoDataUri,
    garmentDescription,
    positivePrompt,
    negativePrompt,
    customStylePrompt,
  } = input;
  
  try {
    const modelBuffer = dataUriToBuffer(modelPhotoDataUri);
    
    // Updated prompt to be more generic, relying on the detailed garmentDescription.
    const finalPrompt = `Substitua a roupa que a modelo está usando pela(s) seguinte(s) peça(s): ${garmentDescription}. Guia Positivo: ${positivePrompt}. Guia Negativo (EVITE a todo custo): ${negativePrompt}. ${customStylePrompt ? `Estilo Personalizado: ${customStylePrompt}` : ''}. Mantenha o rosto e o corpo da modelo original.`;

    // Using createVariation is better suited for this task than edit, as we provide the base image and describe the change.
    const result = await openai.images.createVariation({
      image: new File([modelBuffer.buffer], "model.png", { type: modelBuffer.mimeType }),
      prompt: finalPrompt,
      model: "dall-e-2",
      size: "1024x1024",
      n: 1,
      response_format: 'b64_json'
    });

    const b64_json = result.data[0].b64_json;
    if (!b64_json) {
      throw new Error('A IA não conseguiu gerar a imagem.');
    }

    const imageDataUri = base64ToDataUri(b64_json, 'image/png');

    return { dressedUpPhotoDataUri: imageDataUri };
    
  } catch (error) {
    console.error('Error in generateVirtualDressUp:', error);
    if (error instanceof Error) {
        console.error('OpenAI API Error:', error.message);
    }
    throw new Error('Falha ao se comunicar com a API da OpenAI.');
  }
}
