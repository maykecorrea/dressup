
'use server';

/**
 * @fileOverview An AI agent that dresses a model with garments using a multimodal approach.
 * It takes a model photo, a garment photo, and a text description to generate the final image.
 *
 * - generateVirtualDressUp - A function that handles the virtual dress up process.
 * - GenerateVirtualDressUpInput - The input type for the generateVirtualDressUp function.
 * - GenerateVirtualDressUpOutput - The return type for the generateVirtualDressUp function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';

const GenerateVirtualDressUpInputSchema = z.object({
  modelPhotoDataUri: z
    .string()
    .describe(
      "A photo of a model, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  garmentPhotoDataUri: z
    .string()
    .optional()
    .describe(
      "A photo of the garment to be worn, as a data URI. Expected format: 'data:<mimetype>;base64,<encoded_data>'. This is for individual dress up."
    ),
  garmentDescription: z.string().describe("A textual description of the garment or a combination of garments, previously generated by another AI."),
});
export type GenerateVirtualDressUpInput = z.infer<typeof GenerateVirtualDressUpInputSchema>;

const GenerateVirtualDressUpOutputSchema = z.object({
  dressedUpPhotoDataUri: z
    .string()
    .describe('The photo of the model dressed in the new garment, as a data URI.'),
});
export type GenerateVirtualDressUpOutput = z.infer<typeof GenerateVirtualDressUpOutputSchema>;

export async function generateVirtualDressUp(input: GenerateVirtualDressUpInput): Promise<GenerateVirtualDressUpOutput> {
  const {
    modelPhotoDataUri,
    garmentPhotoDataUri,
    garmentDescription,
  } = input;
  
  try {
    const promptParts: (string | { media: { url: string } } | { text: string })[] = [
        { media: { url: modelPhotoDataUri } },
        { text: `INSTRUÇÃO: Usando a foto da modelo como base, vista-a com a(s) seguinte(s) peça(s) de roupa: ${garmentDescription}. Mantenha o rosto e o corpo da modelo original. O resultado deve ser fotorrealista e de alta qualidade.` },
    ];
    
    // If a specific garment image is provided, add it to the prompt for better context
    if(garmentPhotoDataUri) {
        promptParts.splice(1, 0, { media: { url: garmentPhotoDataUri } });
        promptParts[2] = { text: `INSTRUÇÃO: Usando a foto da modelo como base e a foto da peça como referência visual, vista a modelo com a seguinte peça: ${garmentDescription}. Mantenha o rosto e o corpo da modelo original. O resultado deve ser fotorrealista e de alta qualidade.`};
    }

    const { media } = await ai.generate({
        // This is a powerful multimodal model capable of image generation from text and image inputs.
        model: 'googleai/gemini-2.0-flash-preview-image-generation',
        prompt: promptParts,
        config: {
            responseModalities: ['IMAGE'], 
        },
    });

    if (!media || !media.url) {
        throw new Error('A IA não conseguiu gerar a imagem.');
    }

    return { dressedUpPhotoDataUri: media.url };
    
  } catch (error) {
    console.error('Error in generateVirtualDressUp:', error);
    if (error instanceof Error) {
        console.error('API Error:', error.message);
    }
    throw new Error('Falha ao se comunicar com a API de geração de imagem.');
  }
}
