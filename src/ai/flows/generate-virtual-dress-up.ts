
'use server';

import { ai } from '@/ai/genkit';
import { z } from 'zod';

const GenerateVirtualDressUpInputSchema = z.object({
  modelPhotoDataUri: z
    .string()
    .describe(
      "A photo of a model, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  garmentPhotoDataUri: z
    .string()
    .optional()
    .describe(
      "A photo of the garment. This is used by the description model, but not directly by the image generation model."
    ),
  garmentDescription: z.string().describe("A textual description of the garment or a combination of garments, previously generated by another AI."),
});
export type GenerateVirtualDressUpInput = z.infer<typeof GenerateVirtualDressUpInputSchema>;

const GenerateVirtualDressUpOutputSchema = z.object({
  dressedUpPhotoDataUri: z
    .string()
    .describe('The photo of the model dressed in the new garment, as a data URI.'),
});
export type GenerateVirtualDressUpOutput = z.infer<typeof GenerateVirtualDressUpOutputSchema>;


export async function generateVirtualDressUp(input: GenerateVirtualDressUpInput): Promise<GenerateVirtualDressUpOutput> {
  const {
    modelPhotoDataUri,
    garmentDescription,
  } = input;
  
  try {
    // The image generation model works best with a base image and a text prompt.
    // The garment image is used to generate the description, but not directly here.
    const promptParts = [
        { media: { url: modelPhotoDataUri } },
        { text: `INSTRUÇÃO: Usando a foto da modelo como base, vista-a com a seguinte peça: ${garmentDescription}. O resultado deve ser fotorrealista, de alta qualidade, preservando o rosto e o corpo da modelo original.` },
    ];

    const { media } = await ai.generate({
        model: 'googleai/gemini-2.0-flash-preview-image-generation',
        prompt: promptParts,
        config: {
            responseModalities: ['IMAGE'], 
        },
    });

    if (!media || !media.url) {
        throw new Error('A IA não conseguiu gerar a imagem ou retornou uma resposta vazia.');
    }

    return { dressedUpPhotoDataUri: media.url };
    
  } catch (error) {
    console.error('Error in generateVirtualDressUp:', error);
    if (error instanceof Error) {
        console.error('API Error Details:', error.message);
        throw new Error(`Falha na comunicação com a API de geração: ${error.message}`);
    }
    throw new Error('Falha desconhecida ao se comunicar com a API de geração de imagem.');
  }
}
